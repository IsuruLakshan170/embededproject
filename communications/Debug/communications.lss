
communications.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000226  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d64  00000000  00000000  000002d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c5b  00000000  00000000  0000103c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003da  00000000  00000000  00001c97  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00002074  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000571  00000000  00000000  000020e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000098  00000000  00000000  00002659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000026f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	2a d0       	rcall	.+84     	; 0x14a <main>
  f6:	6b c0       	rjmp	.+214    	; 0x1ce <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <i2c_init>:

//--- I2C Initialize ---//

void i2c_init()
{
	TWBR = 0x62;		//--- Baud rate is set by calculating the of TWBR see Details for Reference
  fa:	82 e6       	ldi	r24, 0x62	; 98
  fc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
	TWCR = (1<<TWEN);	//--- Enable I2C
 100:	84 e0       	ldi	r24, 0x04	; 4
 102:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	TWSR = 0x00;		//--- Prescaler set to 1
 106:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
 10a:	08 95       	ret

0000010c <i2c_start>:

//--- I2C Start Condition ---//

void i2c_start()
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTA);	//--- Start Conditon
 10c:	84 ea       	ldi	r24, 0xA4	; 164
 10e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT)));				//--- Check for Start condition successful
 112:	ec eb       	ldi	r30, 0xBC	; 188
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	80 81       	ld	r24, Z
 118:	88 23       	and	r24, r24
 11a:	ec f7       	brge	.-6      	; 0x116 <i2c_start+0xa>
}
 11c:	08 95       	ret

0000011e <i2c_write>:

//--- I2C Stop Condition ---//

void i2c_write(char x)
{
	TWDR = x;						//--- Move value to I2C reg
 11e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);	//--- Enable I2C and Clear Interrupt
 122:	84 e8       	ldi	r24, 0x84	; 132
 124:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT)));	//--- Write Successful with TWDR Empty
 128:	ec eb       	ldi	r30, 0xBC	; 188
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	80 81       	ld	r24, Z
 12e:	88 23       	and	r24, r24
 130:	ec f7       	brge	.-6      	; 0x12c <i2c_write+0xe>
}
 132:	08 95       	ret

00000134 <i2c_read>:

//--- I2C Read Condition ---//

char i2c_read()
{
	TWCR = (1<<TWEN) | (1<<TWINT);	//--- Enable I2C and Clear Interrupt
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	while (!(TWCR & (1<<TWINT)));	//--- Read successful with all data received in TWDR
 13a:	ec eb       	ldi	r30, 0xBC	; 188
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	88 23       	and	r24, r24
 142:	ec f7       	brge	.-6      	; 0x13e <i2c_read+0xa>
	return TWDR;
 144:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
}
 148:	08 95       	ret

0000014a <main>:
#define F_CPU 16000000
#define BUAD 9600
#define BUAD_RATE_CALC ((F_CPU/16/BUAD) - 1)

int main(void)
{
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	a0 97       	sbiw	r28, 0x20	; 32
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	f8 94       	cli
 158:	de bf       	out	0x3e, r29	; 62
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	cd bf       	out	0x3d, r28	; 61
	DDRB = 0xFF;
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	84 b9       	out	0x04, r24	; 4
	DDRA = 0xFF;		//--- Defining PORT A as output
 162:	81 b9       	out	0x01, r24	; 1
	i2c_init();			//--- I2C Initialization
 164:	ca df       	rcall	.-108    	; 0xfa <i2c_init>
		
 //   char ar[] = "isuru\n";
	char ar[32];
    //High and low bits
    UBRR0H = (BUAD_RATE_CALC >> 8);
 166:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
    UBRR0L = BUAD_RATE_CALC;
 16a:	87 e6       	ldi	r24, 0x67	; 103
 16c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
    ////////////////

    UCSR0B = (1 << TXEN0)| (1 << TXCIE0) | (1 << RXEN0) | (1 << RXCIE0);
 170:	88 ed       	ldi	r24, 0xD8	; 216
 172:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7000c1>
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
	//	PORTA = i2c_read();	//--- Move data in IO Pin to PORTA
		 int arr = i2c_read();
		 
		//unlimited processing
		for (int i = 0; i < strlen(arr); i++){
			while (( UCSR0A & (1<<UDRE0))  == 0){};
 17c:	00 ec       	ldi	r16, 0xC0	; 192
 17e:	10 e0       	ldi	r17, 0x00	; 0
			UDR0 = ar[i];
 180:	0f 2e       	mov	r0, r31
 182:	f6 ec       	ldi	r31, 0xC6	; 198
 184:	ef 2e       	mov	r14, r31
 186:	f1 2c       	mov	r15, r1
    UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);  //8 bit data format
    ////////////////////////////////////////////////////////////////

    while (1){
		
		i2c_start();		//--- Start condition to slave
 188:	f0 2d       	mov	r31, r0
		i2c_write(0x41);	//--- Write Slave address to enable it
 18a:	c0 df       	rcall	.-128    	; 0x10c <i2c_start>
 18c:	81 e4       	ldi	r24, 0x41	; 65
	//	PORTA = i2c_read();	//--- Move data in IO Pin to PORTA
		 int arr = i2c_read();
 18e:	c7 df       	rcall	.-114    	; 0x11e <i2c_write>
 190:	d1 df       	rcall	.-94     	; 0x134 <i2c_read>
 192:	a8 2f       	mov	r26, r24
 194:	b0 e0       	ldi	r27, 0x00	; 0
 196:	ae 01       	movw	r20, r28
 198:	4f 5f       	subi	r20, 0xFF	; 255
 19a:	5f 4f       	sbci	r21, 0xFF	; 255
		 
		//unlimited processing
		for (int i = 0; i < strlen(arr); i++){
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	0b c0       	rjmp	.+22     	; 0x1b8 <main+0x6e>
			while (( UCSR0A & (1<<UDRE0))  == 0){};
 1a2:	f8 01       	movw	r30, r16
 1a4:	80 81       	ld	r24, Z
 1a6:	85 ff       	sbrs	r24, 5
 1a8:	fc cf       	rjmp	.-8      	; 0x1a2 <main+0x58>
			UDR0 = ar[i];
 1aa:	fa 01       	movw	r30, r20
 1ac:	81 91       	ld	r24, Z+
 1ae:	af 01       	movw	r20, r30
 1b0:	f7 01       	movw	r30, r14
 1b2:	80 83       	st	Z, r24
		i2c_write(0x41);	//--- Write Slave address to enable it
	//	PORTA = i2c_read();	//--- Move data in IO Pin to PORTA
		 int arr = i2c_read();
		 
		//unlimited processing
		for (int i = 0; i < strlen(arr); i++){
 1b4:	2f 5f       	subi	r18, 0xFF	; 255
 1b6:	3f 4f       	sbci	r19, 0xFF	; 255
 1b8:	fd 01       	movw	r30, r26
 1ba:	01 90       	ld	r0, Z+
 1bc:	00 20       	and	r0, r0
 1be:	e9 f7       	brne	.-6      	; 0x1ba <main+0x70>
 1c0:	31 97       	sbiw	r30, 0x01	; 1
 1c2:	ea 1b       	sub	r30, r26
 1c4:	fb 0b       	sbc	r31, r27
 1c6:	2e 17       	cp	r18, r30
 1c8:	3f 07       	cpc	r19, r31
 1ca:	58 f3       	brcs	.-42     	; 0x1a2 <main+0x58>
 1cc:	de cf       	rjmp	.-68     	; 0x18a <main+0x40>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
